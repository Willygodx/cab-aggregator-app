version: '3.8'

services:

  passengers-db:
    image: postgres:latest
    container_name: passengers_db
    environment:
      POSTGRES_DB: passengers_db
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - passengers_data:/var/lib/postgresql/data
    networks:
      - cab-aggregator-network
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  drivers-db:
    image: postgres:latest
    container_name: drivers_db
    environment:
      POSTGRES_DB: drivers_db
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - drivers_data:/var/lib/postgresql/data
    networks:
      - cab-aggregator-network
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  rides-db:
    image: postgres:latest
    container_name: rides_db
    environment:
      POSTGRES_DB: rides_db
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - rides_data:/var/lib/postgresql/data
    networks:
      - cab-aggregator-network
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  ratings-db:
    image: mongo:5.0.2
    container_name: ratings_db
    ports:
      - "27017:27017"
    volumes:
      - ratings_data:/data/db
    networks:
      - cab-aggregator-network
    healthcheck:
      test: |
        mongo --eval "db.runCommand({ ping: 1 }).ok"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  discovery-service:
    build:
      context: ../discovery-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: discovery-service
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - cab-aggregator-network
    healthcheck:
      test: curl -f http://discovery-service:8761/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  gateway-service:
    build:
      context: ../gateway-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: gateway-service
    container_name: gateway-service
    environment:
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka/
    ports:
      - "8080:8080"
    depends_on:
      discovery-service:
        condition: service_healthy
    networks:
      - cab-aggregator-network
    healthcheck:
      test: curl -f http://gateway-service:8080/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  passenger-service:
    build:
      context: ../passenger-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: passenger-service
    container_name: passenger-service
    environment:
      DB_URL: jdbc:postgresql://passengers-db/passengers_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: "kafka-0:9092, kafka-1:9092, kafka-2:9092"
    ports:
      - "5002:5002"
    depends_on:
      passengers-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    networks:
      - cab-aggregator-network
    healthcheck:
      test: curl -f http://passenger-service:5002/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  driver-service:
    build:
      context: ../driver-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: driver-service
    container_name: driver-service
    environment:
      DB_URL: jdbc:postgresql://drivers-db/drivers_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: "kafka-0:9092, kafka-1:9092, kafka-2:9092"
    ports:
      - "5001:5001"
    depends_on:
      drivers-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    networks:
      - cab-aggregator-network
    healthcheck:
      test: curl -f http://driver-service:5001/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  rides-service:
    build:
      context: ../rides-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: rides-service
    container_name: rides-service
    environment:
      DB_URL: jdbc:postgresql://rides-db/rides_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DRIVER: ${DB_DRIVER}
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka/
    ports:
      - "5003:5003"
    depends_on:
      rides-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    networks:
      - cab-aggregator-network
    healthcheck:
      test: curl -f http://rides-service:5003/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  rating-service:
    build:
      context: ../rating-service
      dockerfile: ../docker/Dockerfile
      args:
        SERVICE_NAME: rating-service
    container_name: rating-service
    environment:
      DB_URI: mongodb://ratings-db/ratings_db
      EUREKA_SERVER_URL: http://discovery-service:8761/eureka/
      KAFKA_BOOTSTRAP_SERVERS: "kafka-0:9092, kafka-1:9092, kafka-2:9092"
    ports:
      - "5004:5004"
    depends_on:
      ratings-db:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    networks:
      - cab-aggregator-network
    healthcheck:
      test: curl -f http://rating-service:5004/actuator/health
      interval: 1s
      timeout: 10s
      retries: 30
      start_period: 60s

  zookeeper:
    image: bitnami/zookeeper:3.5
    container_name: zookeeper
    ports:
      - "2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - cab-aggregator-network

  kafka-0:
    image: bitnami/kafka:2.8.1
    container_name: kafka-0
    expose:
      - 9092
    ports:
      - "29092:29092"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-0:9092,EXTERNAL://localhost:29092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    volumes:
      - kafka_0_data:/bitnami/kafka
    networks:
      - cab-aggregator-network

  kafka-1:
    image: bitnami/kafka:2.8.1
    container_name: kafka-1
    expose:
      - 9092
    ports:
      - "29093:29093"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-1:9092,EXTERNAL://localhost:29093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    volumes:
      - kafka_1_data:/bitnami/kafka
    networks:
      - cab-aggregator-network

  kafka-2:
    image: bitnami/kafka:2.8.1
    container_name: kafka-2
    expose:
      - 9092
    ports:
      - "29094:29094"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29094
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka-2:9092,EXTERNAL://localhost:29094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
    volumes:
      - kafka_2_data:/bitnami/kafka
    networks:
      - cab-aggregator-network

  kafka-ui:
    image: provectuslabs/kafka-ui:master
    container_name: kafka-ui
    ports:
      - "8079:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cab-aggregator-network

networks:
  cab-aggregator-network:
    name: cab-aggregator-network
    driver: bridge

volumes:
  passengers_data:
  drivers_data:
  rides_data:
  ratings_data:
  zookeeper_data:
    driver: local
    name: zookeeper_data
  kafka_0_data:
    driver: local
    name: kafka_0_data
  kafka_1_data:
    driver: local
    name: kafka_1_data
  kafka_2_data:
    driver: local
    name: kafka_2_data